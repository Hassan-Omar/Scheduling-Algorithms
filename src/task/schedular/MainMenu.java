package task.schedular;

import java.io.FileInputStream;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import org.apache.poi.hssf.usermodel.HSSFRow;
import org.apache.poi.hssf.usermodel.HSSFSheet;
import org.apache.poi.hssf.usermodel.HSSFWorkbook;

/**
 *
 * @author h.omar
 */
public class MainMenu extends javax.swing.JFrame {

    List<Task> readen_Tasks = null ;  
    
    
    /**
     * Creates new form MainMenu
     */
    public MainMenu() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        out = new javax.swing.JTextArea();
        alPanel = new javax.swing.JPanel();
        algorithmsCombo = new javax.swing.JComboBox<>();
        jLabel1 = new javax.swing.JLabel();
        open = new javax.swing.JButton();
        start = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        out.setColumns(20);
        out.setFont(new java.awt.Font("Monospaced", 1, 24)); // NOI18N
        out.setForeground(new java.awt.Color(0, 51, 51));
        out.setRows(50);
        jScrollPane1.setViewportView(out);

        alPanel.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));

        algorithmsCombo.setFont(new java.awt.Font("Arial", 1, 18)); // NOI18N
        algorithmsCombo.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "FCFS", "RR", "SJF", "SRT", "EDF" }));

        jLabel1.setFont(new java.awt.Font("Arial", 1, 18)); // NOI18N
        jLabel1.setText("Algorithm");

        javax.swing.GroupLayout alPanelLayout = new javax.swing.GroupLayout(alPanel);
        alPanel.setLayout(alPanelLayout);
        alPanelLayout.setHorizontalGroup(
            alPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(alPanelLayout.createSequentialGroup()
                .addGroup(alPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(alPanelLayout.createSequentialGroup()
                        .addGap(18, 18, 18)
                        .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 149, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(alPanelLayout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(algorithmsCombo, javax.swing.GroupLayout.PREFERRED_SIZE, 194, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(18, Short.MAX_VALUE))
        );
        alPanelLayout.setVerticalGroup(
            alPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, alPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, 61, Short.MAX_VALUE)
                .addGap(18, 18, 18)
                .addComponent(algorithmsCombo, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(25, 25, 25))
        );

        open.setFont(new java.awt.Font("Arial", 1, 18)); // NOI18N
        open.setText("Open");
        open.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                openMouseClicked(evt);
            }
        });

        start.setFont(new java.awt.Font("Arial", 1, 18)); // NOI18N
        start.setText("Start");
        start.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                startMouseClicked(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(open, javax.swing.GroupLayout.PREFERRED_SIZE, 84, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(alPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(start, javax.swing.GroupLayout.PREFERRED_SIZE, 86, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 810, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(start, javax.swing.GroupLayout.PREFERRED_SIZE, 47, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 439, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
            .addGroup(layout.createSequentialGroup()
                .addGap(95, 95, 95)
                .addComponent(open, javax.swing.GroupLayout.PREFERRED_SIZE, 46, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(28, 28, 28)
                .addComponent(alPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void openMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_openMouseClicked
         //Choose XLS FILE
        JFileChooser Chooser = new JFileChooser();
        int Variable = Chooser.showOpenDialog(null);
    
    
              if (Variable == JFileChooser.APPROVE_OPTION) 
                {                     

                    try {
                        
                        // create work sheet 
                        HSSFWorkbook lta = new HSSFWorkbook(new FileInputStream(Chooser.getSelectedFile()));
                        HSSFSheet Sheet = lta.getSheet("Sheet0");
                       
                        // neasted loop to read the data
                        for(int i=1; i<4 ;i++)

                        {
                            if( readen_Tasks ==null)
                             readen_Tasks = new ArrayList<>() ; 
        
                           HSSFRow taskRow= Sheet.getRow(i); // this is row no i in sheet  
                           Task task_i = new Task() ; 
                           
                           // col reading we don't need col 0
                           task_i.setName(taskRow.getCell(0).toString()) ;
                           // arrival time col 1
                           task_i.setArrivalTime((int)Float.parseFloat(taskRow.getCell(1).toString()));
                           // arrival time col 2
                           task_i.setBurstTime((int)Float.parseFloat(taskRow.getCell(2).toString()));
                           // arrival time col 3                           
                           task_i.setDeadLine((int)Float.parseFloat(taskRow.getCell(3).toString()));
                            
                          readen_Tasks.add(task_i) ;   
                             // System.out.println("task i "+ task_i.getArrivalTime());
                             
                             
                              } JOptionPane.showMessageDialog(null, "the file opened press Start To Start calculation");
                          
                        
          
                        
             
                    } catch (IOException e) {
                        e.printStackTrace();
                    }
                }
           

        
        
    }//GEN-LAST:event_openMouseClicked

    private void startMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_startMouseClicked

    // deyecte which selected algorithm 
    if(algorithmsCombo.getSelectedIndex()==0)
    {  
     FCFS fcfs =new FCFS() ;
     String output ="Used Algorithm  -->  " +fcfs.getName() +"\r\n\r\n"  ; 
     List<Task> tasks = fcfs.drive(readen_Tasks);
     output +=  UtileMethods.printer(tasks) ;
     output+= "\r\n" +"      ____________________________________       " + "\r\n" ; 
     output += "\r\n\r\nTotal Average Waiting Time  = "+fcfs.getAwt()+" us"  +"\r\n" ;
     output += "Total Average Response Time  = "+fcfs.getArt()+" us"  +"\r\n";
     output += "Total Average Total Around Time  = "+fcfs.getAtt()+" us"  +"\r\n";
     output += "Utilization Factor  = "+fcfs.getUfactor()+"%"  +"\r\n";
     output += "Throughput  = "+fcfs.getThroughput()+" task per us"  +"\r\n";
     output += "Proportionality  = "+fcfs.getProp()  +"\r\n";
     
     out.setText(output) ; 
    }
    else if((algorithmsCombo.getSelectedIndex()==1)) 
    {  }
    
    else if((algorithmsCombo.getSelectedIndex()==2)) {  
     SJF sjf =new SJF() ;
     String output ="Used Algorithm  -->  " +sjf.getName() +"\r\n\r\n"  ; 
     List<Task> tasks = sjf.drive(readen_Tasks);
     output +=  UtileMethods.printer(tasks) ;
     output+= "\r\n" +"      ____________________________________       " + "\r\n" ; 
     output += "\r\n\r\nTotal Average Waiting Time  = "+sjf.getAwt()+" us"  +"\r\n" ;
     output += "Total Average Response Time  = "+sjf.getArt()+" us"  +"\r\n";
     output += "Total Average Total Around Time  = "+sjf.getAtt()+" us"  +"\r\n";
     output += "Utilization Factor  = "+sjf.getUfactor()+"%"  +"\r\n";
     output += "Throughput  = "+sjf.getThroughput()+" task per us"  +"\r\n";
     output += "Proportionality  = "+sjf.getProp()  +"\r\n";
     
     out.setText(output) ; 
    }
    else if((algorithmsCombo.getSelectedIndex()==1)) 
    {  }
    else if((algorithmsCombo.getSelectedIndex()==4)) {  
     EDF edf =new EDF() ;
     String output ="Used Algorithm  -->  " +edf.getName() +"\r\n\r\n"  ; 
     List<Task> tasks = edf.drive(readen_Tasks);
     output +=  UtileMethods.printer(tasks) ;
     output+= "\r\n" +"      ____________________________________       " + "\r\n" ; 
     output += "\r\n\r\nTotal Average Waiting Time  = "+edf.getAwt()+" us"  +"\r\n" ;
     output += "Total Average Response Time  = "+edf.getArt()+" us"  +"\r\n";
     output += "Total Average Total Around Time  = "+edf.getAtt()+" us"  +"\r\n";
     output += "Utilization Factor  = "+edf.getUfactor()+"%"  +"\r\n";
     output += "Throughput  = "+edf.getThroughput()+" task per us"  +"\r\n";
     output += "Proportionality  = "+edf.getProp()  +"\r\n";
     
     out.setText(output) ; 
    }
    
        
    }//GEN-LAST:event_startMouseClicked

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
      
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(MainMenu.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(MainMenu.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(MainMenu.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(MainMenu.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new MainMenu().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel alPanel;
    private javax.swing.JComboBox<String> algorithmsCombo;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JButton open;
    private javax.swing.JTextArea out;
    private javax.swing.JButton start;
    // End of variables declaration//GEN-END:variables
}
